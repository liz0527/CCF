/*
题目背景
　　汉东省政法大学附属中学所在的光明区最近实施了名为“智慧光明”的智慧城市项目。具体到交通领域，通过“智慧光明”终端，可以看到光明区所有红绿灯此时此刻的状态。小明的学校也安装了“智慧光明”终端，小明想利用这个终端给出的信息，估算自己放学回到家的时间。
　　京州市的红绿灯是这样工作的：每盏红绿灯有红、黄、绿三盏灯和一个能够显示倒计时的显示牌。假设红绿灯被设定为红灯 r 秒，黄灯 y 秒，绿灯 g 秒，那么从 0 时刻起，[0,r) 秒内亮红灯，车辆不许通过；[r, r+g) 秒内亮绿灯，车辆允许通过；[r+g, r+g+y) 秒内亮黄灯，车辆不许通过，然后依次循环。倒计时的显示牌上显示的数字 l（l > 0）是指距离下一次信号灯变化的秒数。
问题描述
　　一次放学的时候，小明已经规划好了自己回家的路线，并且能够预测经过各个路段的时间。同时，小明通过学校里安装的“智慧光明”终端，看到了出发时刻路上经过的所有红绿灯的指示状态。请帮忙计算小明此次回家所需要的时间。
输入格式
　　输入的第一行包含空格分隔的三个正整数 r、y、g，表示红绿灯的设置。这三个数均不超过 106。
　　输入的第二行包含一个正整数 n，表示小明总共经过的道路段数和路过的红绿灯数目。
　　接下来的 n 行，每行包含空格分隔的两个整数 k、t。k=0 表示经过了一段道路，将会耗时 t 秒，此处 t 不超过 106；k=1、2、3 时，分别表示出发时刻，此处的红绿灯状态是红灯、黄灯、绿灯，且倒计时显示牌上显示的数字是 t，此处 t 分别不会超过 r、y、g。
输出格式
　　输出一个数字，表示此次小明放学回家所用的时间。
样例输入
30 3 30
8
0 10
1 5
0 11
2 2
0 6
0 3
3 10
0 3
样例输出
46
样例说明
　　小明先经过第一段路，用时 10 秒。第一盏红绿灯出发时是红灯，还剩 5 秒；小明到达路口时，这个红绿灯已经变为绿灯，不用等待直接通过。接下来经过第二段路，用时 11 秒。第二盏红绿灯出发时是黄灯，还剩两秒；小明到达路口时，这个红绿灯已经变为红灯，还剩 11 秒。接下来经过第三、第四段路，用时 9 秒。第三盏红绿灯出发时是绿灯，还剩 10 秒；小明到达路口时，这个红绿灯已经变为红灯，还剩两秒。接下来经过最后一段路，用时 3 秒。共计 10+11+11+9+2+3 = 46 秒。
评测用例规模与约定
　　有些测试点具有特殊的性质：
　　* 前 2 个测试点中不存在任何信号灯。
　　测试点的输入数据规模：
　　* 前 6 个测试点保证 n ≤ 103。
　　* 所有测试点保证 n ≤ 105。
*/
#include <iostream>
using namespace std;
int main(){
	long long int light[3];
	int i;
	cin >> light[0] >> light[2] >> light[1];//输入红、黄、绿灯秒数。
	long long int sum = light[0] + light[1] + light[2];//红绿灯总时长
	long long int n,k,now,ans=0;//n-总路口，k-出发时路口状况标志，now-出发时该灯还能亮的时间，ans-已经用掉的时间。
	cin >> n;
	while(cin >> k >> now){
		if(k==0){//是道路则直接把时间加上
			ans += now;
		}
		else {//是红绿灯
			//先把k与i的对应关系转换一下
			if(k==1){//红灯
				i=0;
			}
			else if(k==2){//黄灯
				i=2;
			}
			else if(k==3){//绿灯
				i=1;
			}
			now = (light[i] - now + ans)%sum;//light[i]-now是出发时已经亮的秒数，(light[i] - now + ans)%sum是红绿灯变换的最后一周的时长
			while(now>light[i]){//now比当前的灯的时长还长，说明已经不在当前灯，要进入下一个灯判断
				now -= light[i];
				i = (i+1)%3;
			}
			//得出当前所在的灯，绿灯不用管，红灯要加剩余时间，黄灯要加剩余时间和红灯
			if(i==0){//红灯
				ans += light[i]-now;
			}
			else if(i==2){//黄灯
				ans += light[i]-now+light[0];
			}
		}
	}
	cout << ans;
	return 0;
}